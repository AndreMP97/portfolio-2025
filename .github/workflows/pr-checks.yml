name: PR Checks

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'

# Allow workflow to trigger itself
permissions:
  contents: write
  pull-requests: write

jobs:
  check-last-commit:
    runs-on: ubuntu-latest
    outputs:
      skip_build: ${{ steps.check.outputs.skip_build }}
    steps:
      # Checkout the real PR head commit (not the temporary merge commit)
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      # Setup Node.js so we can read package.json
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Check last commit message for automated bump pattern
      - name: Check last commit message
        id: check
        run: |
          VERSION=$(node -p "require('./package.json').version")
          COMMIT_MSG=$(git log -1 --pretty=%s)
          echo "Last commit message: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" =~ ^chore:\ bump\ version\ and\ update\ docs\ to\ ${VERSION}$ ]]; then
            echo "skip_build=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip_build=false" >> "$GITHUB_OUTPUT"
          fi

  build-test-lint:
    runs-on: ubuntu-latest
    needs: check-last-commit
    if: needs.check-last-commit.outputs.skip_build == 'false'

    steps:
      # Checkout PR branch
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      # Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Run typecheck
      - name: Run typecheck
        run: pnpm typecheck

      # Run lint
      - name: Run lint
        run: pnpm lint

      # Clean /docs folder
      - name: Clean /docs folder
        run: rm -rf docs

      # Build project
      - name: Build project
        run: pnpm exec rsbuild build

      # Replace docs
      - name: Replace docs
        run: mv dist docs

      # Create CNAME file
      - name: Create CNAME file
        run: |
          echo "$CNAME_DOMAIN" > docs/CNAME
        env:
          CNAME_DOMAIN: ${{ secrets.CNAME_DOMAIN }}

      # Commit docs and conditional version bump using PAT
      - name: Commit docs and conditional version bump
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch main properly to avoid "new branch" messages
          git fetch origin main:refs/remotes/origin/main

          # Stash local changes (docs, package.json, etc.)
          git stash push --include-untracked || true

          # Rebase PR branch on top of main
          git rebase origin/main || git rebase --abort

          # Restore stashed changes
          git stash pop || true

          # Re-read versions *after* fetch and rebase
          MAIN_VERSION=$(git show origin/main:package.json | grep '"version"' | head -1 | sed -e 's/.*"version": *"\([^"]*\)".*/\1/')
          BRANCH_VERSION=$(node -p "require('./package.json').version")

          echo "Main version: $MAIN_VERSION"
          echo "Current branch version: $BRANCH_VERSION"

          # Bump only if branch version exactly matches main
          if [ "$BRANCH_VERSION" = "$MAIN_VERSION" ]; then
            echo "Version matches main; bumping one patch above."
            npm version patch --no-git-tag-version
          else
            echo "Branch already ahead of main ($BRANCH_VERSION). Skipping version bump."
          fi

          # Always commit docs (and package.json if bumped)
          git add package.json pnpm-lock.yaml docs
          git commit -m "chore: bump version and update docs to $(node -p "require('./package.json').version")" || echo "No changes to commit"

          # Push using PAT token so workflow triggers again
          git push https://x-access-token:${PAT_TOKEN}@github.com/${{ github.repository }} HEAD:${BRANCH_NAME}

          # Trigger workflow dispatch to ensure status updates
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token $PAT_TOKEN" \
            https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/workflows/${WORKFLOW_FILE}/dispatches \
            -d '{"ref":"'"$BRANCH_NAME"'"}'
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          BRANCH_NAME: ${{ github.head_ref }}
          WORKFLOW_FILE: pr-checks.yml

  lint-only:
    runs-on: ubuntu-latest
    needs: check-last-commit
    if: needs.check-last-commit.outputs.skip_build == 'true'

    steps:
      # Checkout PR branch
      - name: Checkout PR branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      # Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Run lint only
      - name: Run lint
        run: pnpm lint